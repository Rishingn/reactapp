{"version":3,"sources":["Components/Login.js","Components/Nav.js","Components/Body.js","Components/Main.js","App.js","serviceWorker.js","index.js"],"names":["Login","state","name","pass","e","this","setState","target","value","console","log","className","id","type","onChange","handleEvent","bind","to","Component","Nav","placeholder","Body","Main","App","path","exact","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sWA0DeA,E,YArDX,aAAc,IAAD,8BACT,+CACKC,MAAO,CACRC,KAAO,QACPC,KAAO,IAJF,E,yEAUGC,GACZC,KAAKC,SAAS,CAACJ,KAAKE,EAAEG,OAAOC,QAC7BH,KAAKC,SAAS,CAACH,KAAKC,EAAEG,OAAOC,QAC7BC,QAAQC,IAAIL,KAAKJ,MAAMC,Q,+BAGvB,OACI,yBAAKS,UAAU,OACX,0CACA,8BACI,+BACI,4BACI,4BACI,0CAGR,4BACI,4BACI,2BAAOC,GAAK,OAAOC,KAAK,OAAOC,SAAUT,KAAKU,YAAYC,KAAKX,UAGvE,4BACI,4BACI,8CAGR,4BACI,4BACI,2BAAOO,GAAK,OAAOC,KAAK,WAAWC,SAAUT,KAAKU,YAAYC,KAAKX,UAG3E,4BACI,4BACG,kBAAC,IAAD,CAAMY,GAAI,UAAU,2BAAOJ,KAAK,SAASL,MAAM,qB,GA5C1DU,a,iBCsBLC,G,kBApBX,aAAc,uE,sEAIV,OACI,yBAAKR,UAAU,UACX,yBAAKA,UAAU,OACf,4BAAKN,KAAKJ,MAAMC,MACZ,2BAAOW,KAAK,OAAOO,YAAY,2BAC/B,2BAAOP,KAAK,OAAOO,YAAY,2BAC/B,kBAAC,IAAD,CAAMH,GAAI,KACV,kD,GAZFjB,ICWHqB,G,MAbF,WACT,OACI,yBAAKV,UAAU,QACX,uDAGA,2DCIGW,EATF,WACT,OACI,6BACI,kBAAC,EAAD,MACA,kBAAC,EAAD,QCcGC,E,iLAbX,OACE,kBAAC,IAAD,KACE,yBAAKZ,UAAU,OACb,kBAAC,IAAD,CAAOa,KAAK,IAAIC,OAAK,EAACC,UAAW1B,IAEjC,kBAAC,IAAD,CAAOwB,KAAK,QAAQC,OAAK,EAACC,UAAWJ,U,GAP7BJ,aCKES,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.5866600d.chunk.js","sourcesContent":["import React, {Component} from 'react';\r\nimport './Login.css';\r\nimport {Link} from 'react-router-dom';\r\n\r\nclass Login extends Component{\r\n    constructor(){\r\n        super();\r\n        this.state ={\r\n            name : \"Rishi\",\r\n            pass : \"\",\r\n        }\r\n    }\r\n        \r\n       \r\n\r\n        handleEvent(e){\r\n        this.setState({name:e.target.value});\r\n        this.setState({pass:e.target.value});\r\n        console.log(this.state.name);\r\n    }\r\n    render(){\r\n        return(\r\n            <div className=\"log\">\r\n                <h1>Login Page</h1>\r\n                <form>\r\n                    <table>\r\n                        <tr>\r\n                            <td>\r\n                                <label>Name:</label>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <input id = \"name\" type=\"text\" onChange={this.handleEvent.bind(this)}></input>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <label>Password:</label>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                                <input id = \"pswd\" type=\"password\" onChange={this.handleEvent.bind(this)}></input>\r\n                            </td>\r\n                        </tr>\r\n                        <tr>\r\n                            <td>\r\n                               <Link to={'./main'}><input type=\"submit\" value=\"Log in\"></input></Link>\r\n                            </td>\r\n                        </tr>\r\n                    </table>\r\n                </form>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Login;","import React from 'react';\r\nimport {Link} from 'react-router-dom';\r\nimport './Nav.css';\r\nimport Login from './Login'\r\n\r\nclass Nav extends Login{\r\n    constructor(){\r\n        super();\r\n    }\r\n        render(){\r\n        return(\r\n            <div className=\"header\">\r\n                <div className=\"nav\">\r\n                <h3>{this.state.name}</h3>\r\n                    <input type=\"text\" placeholder=\"Enter url for left div\"></input>\r\n                    <input type=\"text\" placeholder=\"Enter url for left div\"></input>\r\n                    <Link to={\"/\"}>\r\n                    <button>Log out</button>\r\n                    </Link>\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n\r\n}\r\n\r\nexport default Nav;","import React, {Components} from 'react';\r\nimport './Body.css'\r\n\r\nconst Body = () =>{\r\n    return(\r\n        <div className=\"info\">\r\n            <div>\r\n                This is left container\r\n            </div>\r\n            <div>\r\n                This is right container\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Body;","import React, {Component} from 'react';\r\nimport Nav from './Nav';\r\nimport Body from './Body';\r\n\r\nconst Main = () =>{\r\n    return(\r\n        <div>\r\n            <Nav/>\r\n            <Body/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;","import React, {Component} from 'react';\nimport './App.css';\nimport Login from './Components/Login';\nimport {BrowserRouter as Router} from 'react-router-dom';\nimport Route from 'react-router-dom/Route';\nimport Main from './Components/Main';\n\nclass App extends Component {\n  render(){\n    return (\n      <Router>\n        <div className=\"App\">\n          <Route path='/' exact component={Login}>\n          </Route>\n          <Route path='/main' exact component={Main}>\n          </Route>\n      </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}